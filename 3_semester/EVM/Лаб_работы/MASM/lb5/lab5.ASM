INTERRUPT_VECTOR_NUMBER EQU	08h 		; Номер вектора прерывания
NUMBER_OF_MESSAGE_OUTPUT EQU 5			; Количество вывода сообщения


AStack SEGMENT STACK
	DB 1024 DUP(?)			            ; Выделение 1Kb под стек
AStack ENDS


DATA SEGMENT
	KEEP_CS DW 0 				        ; сегмент исходного прерывания
	KEEP_IP DW 0 				        ; смещение исходного прерывания
	FirstMessage DB 'Message!', 13, 10, '$'
	SecondMessage DB 'End interruption!', 13, 10, '$'
DATA ENDS


CODE SEGMENT
ASSUME CS:CODE, DS:DATA, SS:AStack

SUBR_INT PROC FAR
	; Сохраняем изменяемые регистры в стек
	push ax								; cохраняем регистр ax в стек
	push cx								; cохраняем регистр cx в стек
	push dx								; cохраняем регистр dx в стек
	
	mov dx, offset FirstMessage     	; сохраняем смещение сообщения в регистр dx
	mov ah, 09h				            ; сохраняем в регистр ah функцию dos для вывода сообщения
	
	mov cx, NUMBER_OF_MESSAGE_OUTPUT   	; сохраняем в регистр сх количество прерываний (сколько раз отработает цикл InterruptCycle)

InterruptCycle:
	int 21h  				            ; вызываем прерывание dos для вывода сообщения
    loop InterruptCycle   				; переходим к следующей итерации цикла

	; Задержка перед завершением прерывания
	mov al, 0				            ; помечаем, что мы используем чистую задержку
	mov cx, 000h				        ; устанавливаем задержку (старший бит)
	mov dx, 035h				        ; устанавливаем задержку (младший бит)
	mov ah, 086h			            ; устанавливаем функцию dos, чтобы начать задержку с запуском прерывания 
	int 15h				                ; вызываем прерывание dos, чтобы начать задержку
	
	; Вывод сообщения об окончания прерывания
	mov dx, offset SecondMessage  		; сохраняем смещение сообщения об окончании прерывания в регистр dx
	mov ah, 09h                         ; сохраняем в регистр ah функцию dos для вывода сообщения
	int 21h                             ; вызываем прерывание dos для вывода сообщения
	
	; Восстанавливаем регистры из стэка
	pop ax								; восстанавливаем регистр ax из стека
	pop cx								; восстанавливаем регистр сx из стека
	pop dx								; восстанавливаем регистр dx из стека
	
	mov al, 20h
	out 20h, al 				        
	iret                                ; возврат из прерывания
SUBR_INT ENDP


Main PROC FAR
	push ds								; cохраняем регистр ds в стек
	sub ax, ax							; получаем в регистре ax 0						
	push ax								; cохраняем регистр ax в стек
	mov ax, DATA						; помещаем в регистр ах начало сегмента данных
	mov ds, ax							; сохраняем в ds начало сегмента данных
	
	; Получаем исходную информацию о прерывании
	mov ah, 35h   			            ; получаем вектор прерываний
	mov al, INTERRUPT_VECTOR_NUMBER   	; установливаем номер вектора прерывания
	int 21h			                    ; вызываем прерывание dos для вывода сообщения информации об исходном прерывании
	mov KEEP_CS, ds  			        ; сохраняем сегмент с исходным прерыванием
	mov KEEP_IP, bx  			        ; сохраняем смещение исходного прерывания

	; Устанавливаем собственное прерывание
	push ds								; cохраняем регистр ds в стек
	mov ax, seg SUBR_INT    		    ; устанавливаем сегмент с собственным прерыванием в регистр ax				        
	mov dx, offset SUBR_INT		    	; устанавливаем смещение собственного прерывания в регистр dx
	mov ds, ax          			    ; сохраняем сегмент с собственного прерыванием в регистр ds
	mov ah, 25h				            ; установливаем функцию dos для установки собственного прерывания
	mov al, INTERRUPT_VECTOR_NUMBER		; сохраняем в регистр al номер вектора прерывания
	int 21h             		    	; вызываем прерывание dos, чтобы изменить прерывание
	pop ds                              ; восстанавливаем регистр ds из стэка
	
	int INTERRUPT_VECTOR_NUMBER			; вызываем таймер прерывания
	
	; Восстанавливаем исходное прерывание
	cli					                ; отключаем прерывание
	push ds								; cохраняем регистр ds в стек
	mov ax, KEEP_CS			            ; устанавливаем сегмент с исходным прерыванием в регистр ax
	mov dx, KEEP_IP			            ; устанавливаем смещение исходного прерывания в регистр dx
	mov ds, ax				            ; сохраняем сегмент с исходным прерыванием в регистр ds
	mov ah, 25h				            ; установливаем функцию dos для установки исходного прерывания
	mov al, INTERRUPT_VECTOR_NUMBER		; сохраняем в регистр al номер вектора прерывания
	int 21h          			        ; вываем прерывание dos, чтобы изменить прерывание
	pop ds                              ; восстанавливаем регистр ds из стэка
	sti					                ; включаем прерывание
	ret
	
Main ENDP
CODE ENDS
END Main
