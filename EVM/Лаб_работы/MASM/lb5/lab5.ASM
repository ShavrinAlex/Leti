INTERRUPT_INDEX EQU	08h 		        ; Номер вектора прерывания
PRINT_COUNT EQU 5				        ; Количество вывода сообщения
EOFLine EQU '$'				            ; Символ конца строки


AStack SEGMENT STACK
	DB 1024 DUP(?)			            ; Выделение 1Kb под стек
AStack ENDS


DATA SEGMENT
	KEEP_CS DW 0 				        ; сегмент исходного прерывания
	KEEP_IP DW 0 				        ; смещение исходного прерывания
	InterruptMessage DB 'Message!', 0AH, 0DH, EOFLine
	InterruptEndMessage DB 'End interruption!', 0AH, 0DH, EOFLine
DATA ENDS


CODE SEGMENT
ASSUME CS:CODE, DS:DATA, SS:AStack

CUSTOM_INT PROC FAR
	; Сохраняем изменяемые регистры в стек
	push ax
	push cx
	push dx
	
	mov dx, offset InterruptMessage     ; сохраняем смещение сообщения в регистр dx
	mov ah, 9				            ; сохраняем в регистр ah функцию dos
	
	mov cx, PRINT_COUNT   		        ; сохраняем в регистр сх количество прерываний (сколько раз отработает цикл loop1)
loop1:
	int 21h  				            ; вызываем прерывание dos для вывода сообщения
    loop loop1   				    ; переходим к следующей итерации цикла

	; Задержка перед завершением прерывания
	mov al, 0				            ; помечаем, что мы используем чистую задержку
	mov cx, 0Fh				            ; устанавливаем задержку
	mov dx, 040h				        ; устанавливаем задержку
	mov ah, 86h			                ; устанавливаем функцию dos, чтобы начать задержку с запуском прерывания 
	int 15h				                ; вызываем прерывание dos, чтобы начать задержку
	
	; Вывод сообщения окончания прерывания
	mov dx, offset InterruptEndMessage  ; сохраняем смещение сообщения в регистр dx
	mov ah, 9                           ; сохраняем в регистр ah функцию dos
	int 21h                             ; вызываем прерывание dos для вывода сообщения
	
	; Восстанавливаем регистры из стэка
	pop ax
	pop cx
	pop dx
	
	mov al, 20h
	out 20h, al 				        ; вызываем другое прерывание
	iret                                ; возврат из прерывания
CUSTOM_INT ENDP


Main PROC FAR
	push ds
	sub ax, ax													
	push ax
	mov ax, DATA
	mov ds, ax
	
	; Получаем исходную информацию о прерывании
	mov ah, 35h   			            ; установливаем функцию DOS для получения исходной информации о прерывании
										; (получаем вектор прерываний)
	mov al, INTERRUPT_INDEX   		    ; установливаем номер вектора прерывания, чтобы получить информацию
	int 21h			                    ; вызываем прерывание dos для вывода сообщения информации об исходном прерывании
	mov KEEP_IP, bx  			        ; сохраняем смещение исходного прерывания
	mov KEEP_CS, es  			        ; сохраняем сегмент с исходным прерыванием

	; Устанавливаем собственное прерывание
	push ds						        
	mov dx, offset CUSTOM_INT		    ; устанавливаем смещение собственного прерывания в регистр dx
	mov ax, seg CUSTOM_INT    		    ; устанавливаем сегмент с собственным прерыванием в регистр ax
	mov ds, ax          			    ; сохраняем сегмент с собственного прерыванием в регистр ds
	mov ah, 25h				            ; установливаем функцию dos для установки собственного прерывания
	mov al, INTERRUPT_INDEX		        ; сохраняем в регистр al номер вектора прерывания
	int 21h             		    	; вызываем прерывание dos, чтобы изменить прерывание
	pop ds                              ; восстанавливаем регистр ds из стэка
	
	int INTERRUPT_INDEX			        ; вызываем таймер прерывания
	
	; Восстанавливаем исходное прерывание
	cli					                ; отключаем прерывание
	push ds
	mov dx, KEEP_IP			            ; устанавливаем смещение исходного прерывания в регистр dx
	mov ax, KEEP_CS			            ; устанавливаем сегмент с исходным прерыванием в регистр ax
	mov ds, ax				            ; сохраняем сегмент с исходным прерыванием в регистр ds
	mov ah, 25h				            ; установливаем функцию dos для установки исходного прерывания
	mov al, INTERRUPT_INDEX		        ; сохраняем в регистр al номер вектора прерывания
	int 21h          			        ; вываем прерывание dos, чтобы изменить прерывание
	pop ds                              ; восстанавливаем регистр ds из стэка
	sti					                ; включаем прерывание

	ret
Main ENDP
CODE ENDS
END Main
